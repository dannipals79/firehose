{"version":3,"sources":["src/componenets/CustomNavigationDrawer.js","src/breakpoints.js","src/componenets/CustomNavigationBar.js","src/Navigation.js","App.js","src/useTheme.js"],"names":["CustomNavigationDrawer","theme","navProps","state","navigation","isActive","index","DrawerContentScrollView","routes","map","route","Item","label","name","accessibilityLabel","active","onPress","navigate","key","useBreakpoint","width","breakpointForWidth","useWindowDimensions","CustomNavigationBar","options","back","showDrawerToggle","breakpoint","showDrawerToggleForBreakpoint","Appbar","Header","BackAction","goBack","Content","title","Action","icon","toggleDrawer","HelloStack","createNativeStackNavigator","Hello","Navigator","screenOptions","header","props","Screen","component","HelloScreen1","HelloScreen2","useNavigation","Text","Button","mode","AnotherStack","Another","AnotherScreen1","Drawer","createDrawerNavigator","NavigationContents","drawerTypeForBreakpoint","getDrawerTypeForBreakpoint","headerShown","drawerType","drawerContent","Navigation","NavigationContainer","App","baseTheme","useColorScheme","DarkTheme","DefaultTheme","roundness","colors","primary","useTheme","StatusBar","style"],"mappings":"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","file":"static/js/app.1a89da53.chunk.js","sourcesContent":["import {DrawerContentScrollView}  from \"@react-navigation/drawer\";\r\nimport {Drawer} from \"react-native-paper\";\r\n\r\nexport default function CustomNavigationDrawer({theme, ...navProps}) {\r\n    const {state, navigation} = navProps; \r\n\r\n    const isActive = index => index === state.index;     \r\n\r\n    return (\r\n        <DrawerContentScrollView {...navProps}>\r\n            {state.routes.map((route, index) => (\r\n                <Drawer.Item\r\n                    key={route.key}\r\n                    label={route.name}\r\n                    accessibilityLabel={route.name}\r\n                    active={isActive(index)}                    \r\n                    onPress={() => navigation.navigate(route.name)}\r\n                />\r\n            ))}\r\n        </DrawerContentScrollView>\r\n    ); \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {useWindowDimensions} from 'react-native';\r\n\r\n// export const breakpointMedium = 429;\r\nexport const breakpointLarge = 600;\r\n\r\nexport const large = 'large';\r\nexport const medium = 'medium';\r\n\r\nconst breakpointForWidth = width => (width >= breakpointLarge ? large : medium);\r\n\r\nexport function useBreakpoint() {\r\n  const {width} = useWindowDimensions();\r\n  return breakpointForWidth(width);\r\n}","import {Appbar} from 'react-native-paper'; \r\nimport { large,useBreakpoint } from '../breakpoints';\r\n\r\nconst showDrawerToggleForBreakpoint = breakpoint => breakpoint != large; \r\n\r\nexport default function CustomNavigationBar({navigation, options, back}) {\r\n    const breakpoint = useBreakpoint(); \r\n    const showDrawerToggle = showDrawerToggleForBreakpoint(breakpoint); \r\n\r\n    return (\r\n        <Appbar.Header>\r\n        {back && (\r\n            <Appbar.BackAction \r\n                onPress={navigation.goBack}\r\n                accessibilityLabel=\"Back\"\r\n            />\r\n        ) } \r\n            <Appbar.Content title={options.title} />\r\n            {showDrawerToggle && (\r\n                <Appbar.Action \r\n                    // accessibilityLabel='Menu'\r\n                    icon=\"menu\"\r\n                    onPress={navigation.toggleDrawer}\r\n                />\r\n            )}\r\n        </Appbar.Header>\r\n    ); \r\n}","import { createDrawerNavigator } from \"@react-navigation/drawer\";\r\nimport { NavigationContainer } from \"@react-navigation/native\";\r\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\r\nimport { Text } from \"react-native\";\r\nimport { Button } from \"react-native-paper\";\r\nimport CustomNavigationDrawer from \"./componenets/CustomNavigationDrawer\";\r\nimport CustomNavigationBar from './componenets/CustomNavigationBar'\r\nimport { useNavigation } from \"@react-navigation/native\";\r\nimport { large, useBreakpoint} from './breakpoints'\r\n\r\nconst HelloStack = createNativeStackNavigator(); \r\nconst Hello = () => (\r\n    <HelloStack.Navigator\r\n        screenOptions={{ \r\n            header:props => <CustomNavigationBar {...props} />\r\n         }}\r\n    >\r\n        <HelloStack.Screen \r\n            name=\"HelloScreen1\"\r\n            component={HelloScreen1}\r\n            options={ {title: 'Hello screen1 !!!'} } \r\n        />\r\n        \r\n        <HelloStack.Screen \r\n            name=\"HelloScreen2\"\r\n            component={HelloScreen2}\r\n            options={ {title: 'Hello screen2-3!!!!'} } \r\n        />\r\n\r\n    </HelloStack.Navigator>\r\n); \r\n\r\nfunction HelloScreen1() {\r\n    const navigation = useNavigation(); \r\n\r\n    return (\r\n        <>\r\n        <Text>Hola, screen 1 </Text>\r\n        <Button\r\n             mode =\"contained\" \r\n             onPress={() => navigation.navigate('HelloScreen2') } \r\n        > \r\n            Go to screen2</Button>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nfunction HelloScreen2() {\r\n    return (\r\n        <>\r\n        <Text>Hello screen 2</Text>        \r\n        </>\r\n    )\r\n}\r\n\r\n\r\nconst AnotherStack = createNativeStackNavigator(); \r\nconst Another = () => (\r\n    <AnotherStack.Navigator\r\n        screenOptions={{ \r\n            header:props => <CustomNavigationBar {...props} />\r\n         }}\r\n    >\r\n        <AnotherStack.Screen \r\n            name=\"AnotherScreen1\"\r\n            component={AnotherScreen1}\r\n            options={ {title: 'Another1-error?'} } \r\n        />\r\n    </AnotherStack.Navigator>\r\n); \r\n\r\n\r\nfunction AnotherScreen1() {\r\n    return <Text> hi Another1 !!</Text>; \r\n}\r\n\r\nconst Drawer = createDrawerNavigator();\r\n\r\nconst getDrawerTypeForBreakpoint = breakpoint =>\r\n    breakpoint === large ? 'permanent' : 'back'; \r\n\r\n\r\nfunction NavigationContents() {\r\n    const breakpoint = useBreakpoint(); \r\n    const drawerTypeForBreakpoint = getDrawerTypeForBreakpoint(breakpoint); \r\n\r\n    return (\r\n        <Drawer.Navigator \r\n          screenOptions={{ \r\n            headerShown:false,\r\n            drawerType: drawerTypeForBreakpoint,\r\n        }}\r\n          drawerContent={props => <CustomNavigationDrawer {...props} /> }\r\n        >\r\n         <Drawer.Screen name=\"Hello\" component = {Hello} />           \r\n         <Drawer.Screen name=\"Another\" component = {Another} />           \r\n        </Drawer.Navigator>\r\n    );\r\n}\r\n\r\nexport default function Navigation() {\r\n\r\nreturn (\r\n    <NavigationContainer>\r\n        <NavigationContents /> \r\n    </NavigationContainer>\r\n)\r\n\r\n} \r\n","import { StatusBar } from 'expo-status-bar';\nimport { Provider as PaperProvider } from 'react-native-paper';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport Navigation from './src/Navigation'; \nimport useTheme from './src/useTheme'; \n\n\n\nexport default function App() {\n  const theme = useTheme(); \n  return  (\n    <PaperProvider theme={theme}>\n      <SafeAreaProvider>\n      <StatusBar style=\"auto\" />\n      <Navigation />    \n      </SafeAreaProvider>\n    </PaperProvider>\n    \n  );\n}\n\n// const styles = StyleSheet.create({\n//   container: {\n//     flex: 1,\n//     backgroundColor: '#fff',\n//     alignItems: 'center',\n//     justifyContent: 'center',\n//   },\n// });\n","import {useColorScheme} from 'react-native';\r\nimport {DarkTheme, DefaultTheme} from 'react-native-paper';\r\n\r\nconst FIREHOSE_RED = '#3498db';\r\n\r\nexport default function useTheme() {\r\n  const colorScheme = useColorScheme();\r\n\r\n  const baseTheme = colorScheme === 'dark' ? DarkTheme : DefaultTheme;\r\n\r\n  const theme = {\r\n    ...baseTheme,\r\n    roundness: 15,\r\n    colors: {\r\n      ...baseTheme.colors,\r\n      primary: FIREHOSE_RED,\r\n    },\r\n  };\r\n\r\n  return theme;\r\n}"],"sourceRoot":""}